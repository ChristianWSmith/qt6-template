name: Build Qt CMake Project

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  UPLOAD_DIR: upload
  BUILD_TYPE: Release
  BUILD_TEST: ON
  UPDATE_TRANSLATIONS: OFF

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
            # - os: ubuntu-latest
            - os: windows-latest
            # - os: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract Python Version from Pipfile
      id: extract_python
      shell: bash
      run: |
        PYTHON_VERSION=$(awk -F'"' '/python_version/ { print $2 }' Pipfile)
        echo "Found Python version: ${PYTHON_VERSION}"
        echo "python-version=${PYTHON_VERSION}" >> "$GITHUB_OUTPUT"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.extract_python.outputs.python-version }}

    - name: Install Pipenv
      shell: bash
      run: |
        pip install --user pipenv
        PYTHON_BIN="$(python -m site --user-base)/bin"
        echo "${PYTHON_BIN}" >> "${GITHUB_PATH}"
        export PATH="${PYTHON_BIN}:${PATH}"
        pipenv install

    - name: Install System Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-cursor-dev \
          clang-tidy

    - name: Confirm OpenGL (macOS)
      if: runner.os == 'macOS'
      run: system_profiler SPSoftwareDataType

    - name: Configure MSVC Environment (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Deployment Tools (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install innosetup

    - name: Install Qt (All)
      shell: bash
      run: |
        ./scripts/install_qt.sh

    - name: Set Qt PATH for Test Discovery
      shell: bash
      if: env.BUILD_TEST == 'ON'
      run: |
        source ./scripts/env.sh
        echo "PATH=${QT_BIN}:${PATH}" >> ${GITHUB_ENV}
        echo "QT_QPA_PLATFORM=offscreen" >> ${GITHUB_ENV}

    - name: Configure and Build (All)
      shell: bash
      run: |
        ./scripts/build.sh \
          --build-type ${{ env.BUILD_TYPE }} \
          --test ${{ env.BUILD_TEST }} \
          --update-translations ${{ env.UPDATE_TRANSLATIONS }}

    - name: Unit Tests (All)
      shell: bash
      if: env.BUILD_TEST == 'ON'
      run: |
        source ./scripts/env.sh
        
        if [ "${PLATFORM}" == "windows" ]; then
          export WINDEPLOYQT=$(cygpath -w "${QT_BIN}/windeployqt.exe")
          export EXE_PATH=$(cygpath -w "${BUILD_DIR}/${{ env.BUILD_TYPE }}/unit_tests.exe")
          ${WINDEPLOYQT} "${EXE_PATH}"
        "${EXE_PATH}" --gtest_output=stderr
        else
          "${BUILD_DIR}/unit_tests" --gtest_output=stderr
        fi


    - name: Smoke Test (All)
      shell: bash
      run: |
        ./scripts/run.sh --build-type ${{ env.BUILD_TYPE }} --smoke-test

    - name: Static Analysis (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        source ./scripts/env.sh
        clang-tidy -p "${BUILD_DIR}" $(find "${PROJECT_ROOT}/src" -type f -regextype posix-extended -regex ".*\.(cpp|h)")

    - name: Bundle Application (Linux)
      if: runner.os == 'Linux'
      run: |
        source ./scripts/env.sh

        export APP_DIR="${APP_NAME}.AppDir"
        export BIN_DIR="${APP_DIR}/usr/bin"
        export LIB_DIR="${APP_DIR}/usr/lib"
        export APP_BIN="${BIN_DIR}/${APP_NAME}"

        export APP_PLUGINS_DIR="${APP_DIR}/usr/plugins"
        export APP_PLATFORMS_DIR="${APP_PLUGINS_DIR}/platforms"
        export APP_WAYLAND_DIR="${APP_PLUGINS_DIR}/wayland-shell-integration"

        echo "Installing system dependencies..."
        sudo apt install -y fuse libfuse2 imagemagick patchelf

        echo "Installing appimagetool..."
        wget https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage -O appimagetool
        chmod +x appimagetool

        echo "Setting up AppDir..."
        mkdir -p "${BIN_DIR}"
        mkdir -p "${LIB_DIR}"
        mkdir -p "${APP_PLATFORMS_DIR}"
        mkdir -p "${APP_WAYLAND_DIR}"
        cp -r "${QT_WAYLAND_DIR}/." "${APP_WAYLAND_DIR}/"
        cp -r "${QT_PLATFORMS_DIR}/." "${APP_PLATFORMS_DIR}/"
        cp "${BUILD_DIR}/${APP_NAME}" "${APP_BIN}"
        chmod +x "${APP_BIN}"

        seen_deps=()
        deps=()

        gather_deps() {
          local bin="$1"
          while IFS= read -r dep; do
            [[ -z "${dep}" ]] && continue

            if [[ ! -e "${dep}" ]]; then
              echo "ERROR: Dependency not found or broken symlink: ${dep}" >&2
              exit 1
            fi

            for existing in "${seen_deps[@]}"; do
              [[ "${existing}" == "${dep}" ]] && continue 2
            done

            seen_deps+=("${dep}")
            deps+=("${dep}")
            gather_deps "${dep}"
          done < <(ldd "${bin}" | awk '/=>/ {print $3}' | grep -v '^(')
        }

        echo "Gathering dependencies..."
        gather_deps "${APP_BIN}"

        echo "Getting dependency blacklist..."
        EXCLUDELIST_PATH="${{ runner.temp }}/appimage_excludelist"
        wget -qO "${EXCLUDELIST_PATH}" https://raw.githubusercontent.com/AppImage/pkg2appimage/master/excludelist
        BLACKLIST_REGEX=$(grep -vE '^\s*#|^\s*$' "${EXCLUDELIST_PATH}" | \
          cut -d'#' -f1 | \
          sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | \
          sed -E 's/[][\.^$]/\\&/g' | \
          sed 's/^/^/' | \
          sed 's/$/$/' | \
          paste -sd'|' -)

        echo "Copying dependencies..."
        for dep in "${deps[@]}"; do
          real_dep=$(readlink -f "${dep}")
          base=$(basename "${real_dep}")
          if [[ ! "${base}" =~ ${BLACKLIST_REGEX} ]]; then
            cp -v "${dep}" "${LIB_DIR}/" || true
          else
            echo "Skipping blacklisted dependency: ${base}"
          fi
        done

        echo "Patching RPATH..."
        patchelf --set-rpath '$ORIGIN/../lib' "${APP_BIN}"

        echo "Finalizing AppDir..."
        cat > "${APP_DIR}/AppRun" <<EOF
        #!/bin/sh
        export QT_QPA_PLATFORM_PLUGIN_PATH="\${APPDIR}/usr/plugins/platforms"
        "\${APPDIR}/usr/bin/${APP_NAME}" "\$@"
        EOF
        chmod +x "${APP_DIR}/AppRun"

        cat > "${APP_DIR}/${APP_ID}.desktop" <<EOF
        [Desktop Entry]
        Type=Application
        X-AppVersion=${APP_VERSION}
        Name=${APP_NAME}
        Exec=${APP_NAME}
        Icon=${APP_ID}
        Categories=${APP_CATEGORIES}
        StartupWMClass=${APP_NAME}
        EOF

        convert "${APP_ICON}" "${APP_DIR}/${APP_ID}.png"


        echo "Building AppImage..."
        rm -rf "${APP_NAME}-x86_64.AppImage"
        rm -rf "${APP_NAME}.AppImage"
        ./appimagetool "${APP_DIR}"
        mv "${APP_NAME}-x86_64.AppImage" "${BUILD_DIR}/${APP_NAME}.AppImage"

    - name: Bundle Application (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        source ./scripts/env.sh
        export APP_PATH="${BUILD_DIR}/${APP_NAME}.app"
        "${QT_BIN}/macdeployqt" "${APP_PATH}"

    - name: Bundle Application (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        source ./scripts/env.sh
        export WINDEPLOYQT=$(cygpath -w "${QT_BIN}/windeployqt.exe")
        export EXE_PATH=$(cygpath -w "${BUILD_DIR}/${{ env.BUILD_TYPE }}/${APP_NAME}.exe")

        ${WINDEPLOYQT} "${EXE_PATH}"
        
        export ISS_PATH=$(cygpath -w "${{ github.workspace }}/inno.iss")
        cat > "${ISS_PATH}" <<EOF
        [Setup]
        AppName=${APP_NAME}
        AppVersion=${APP_VERSION}
        DefaultDirName={commonpf}\\${APP_NAME}
        OutputDir=${BUILD_DIR}
        OutputBaseFilename=${APP_NAME}Installer
        Compression=lzma
        SolidCompression=yes
        SetupIconFile=${APP_ICON}

        [Files]
        Source: "${BUILD_DIR}\\${{ env.BUILD_TYPE }}\\${APP_NAME}.exe"; DestDir: "{app}"; Flags: ignoreversion
        Source: "${BUILD_DIR}\\${{ env.BUILD_TYPE }}\\*.dll"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
        Source: "${BUILD_DIR}\\${{ env.BUILD_TYPE }}\\platforms\\*"; DestDir: "{app}\\platforms"; Flags: ignoreversion recursesubdirs

        [Icons]
        Name: "{group}\\${APP_NAME}"; Filename: "{app}\\${APP_NAME}.exe"; IconFilename: "{app}\\${APP_ICON}"
        Name: "{commondesktop}\\${APP_NAME}"; Filename: "{app}\\${APP_NAME}.exe"; IconFilename: "{app}\\${APP_ICON}"
        EOF

        cat "${ISS_PATH}"
        iscc "${ISS_PATH}"

    - name: Move Artifact to Uploads
      shell: bash
      run: |
        source ./scripts/env.sh
        mkdir -p "${{ env.UPLOAD_DIR }}"
        
        if [ -e "${BUILD_DIR}/${APP_NAME}.AppImage" ]; then
          mv -v "${BUILD_DIR}/${APP_NAME}.AppImage" "${{ env.UPLOAD_DIR }}"
        fi

        if [ -e "${BUILD_DIR}/${APP_NAME}.app" ]; then
          mv -v "${BUILD_DIR}/${APP_NAME}.app" "${{ env.UPLOAD_DIR }}"
        fi

        if [ -e "${BUILD_DIR}/${APP_NAME}Installer.exe" ]; then
          mv -v "${BUILD_DIR}/${APP_NAME}Installer.exe" "${{ env.UPLOAD_DIR }}"
        fi

    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}
        path: ${{ env.UPLOAD_DIR }}